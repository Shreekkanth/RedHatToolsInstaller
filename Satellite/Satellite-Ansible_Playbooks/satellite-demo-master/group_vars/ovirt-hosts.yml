# vim: sw=2 ai ts=104
---
############
# This is so we can ssh somewhere different than the name
############
ansible_host: "{{ nic.ip | ipaddr('address') }}"

############
# template logic to create the nic variable from the ip= given in the inventory
############
_nic: "{{ ip.split(',')[0].split(':') }}"
nic:
  name: "{{ _nic[0] }}"
  ifname: "{{ _nic[1] }}"
  ip: "{{ _nic[2] | ipaddr('host') }}"
  gw: "{{ _nic[2] | ipaddr('subnet') | ipaddr(gw) | ipaddr('address') }}"

############
# fancy template logic to create the lines required for oVirt for the extra NIC
# interfaces
############
_vm_nics: |
  "{% for i in ip.split(',') %}"
  "{% set ii = i.split(':') %}"
  "- name: {{ ii[0] }}"
  "  profile_name: {{ ii[0] }}"
  "{% endfor %}"
vm_nics: "{{ _vm_nics | replace('\"', '') | from_yaml }}"

_nmcli_extra_ifaces: |
  "{% for i in ip[1:].split(',') %}"
  "{% set ii = i.split(':') %}"
  "- name: {{ ii[1] }}"
  "  ip: {{ ii[2] | ipaddr('host') }}"
  "{% endfor %}"
nmcli_extra_ifaces: "{{ _nmcli_extra_ifaces | replace('\"', '') | from_yaml }}"
############
# End of NIC logic
############

############
# Cloud init stuff
############
vm_cloud_init:
  host_name: "{{ hostname }}"
  user_name: "{{ ansible_user }}"
  root_password: "{{ user_password }}"
  nic_ip_address: "{{ nic.ip | ipaddr('address') }}"
  nic_netmask: "{{ nic.ip | ipaddr('netmask') }}"
  nic_gateway: "{{ nic.gw }}"
  nic_name: "{{ nic.ifname }}"
  nic_on_boot: true
  nic_boot_protocol: STATIC
  dns_servers: "{{ dns_servers }}"
  dns_search: "{{ dns_search }}"
  regenerate_ssh_keys: true
  authorized_ssh_keys: "{{ authorized_ssh_keys }}"
  custom_script: |
    runcmd:
      - useradd demo
      - passwd demo --stdin <<< "{{ user_password }}"
      - ifdown eth0
      - ifup eth0
      - nmcli c modify 'System eth0' connection.id eth0 ipv4.dns "{{ dns_servers }}" ipv4.dns-search "{{ dns_search }}"
      - ifdown eth0
      - ifup eth0
      - echo "Updated with Cloud-Init" >> /etc/issue
      - sync
