# vim: sw=2 ai ts=102
---

- name: "Start ovirt-guest-agent container: {{ docker_ovirt_agent }}"
  docker_container:
    image: "{{ docker_ovirt_agent }}"
    name: ovirt_guest_agent
    pid_mode: host
    network_mode: host
    privileged: true
    state: started
    restart_policy: always
    env:
      HOST: /host
      container: docker
      IMAGE: "{{ docker_ovirt_agent }}"
      NAME: ovirt_guest_agent
    volumes:
      - /:/host
      - /proc:/hostproc
      - /dev/virtio-ports/com.redhat.rhevm.vdsm:/dev/virtio-ports/com.redhat.rhevm.vdsm
  when: docker_ovirt_agent is not none
  async: 300
  poll: 0
  register: docker_ovirt_agent_async

- block:
  - name: "Ensure haproxy directory exixts"
    file:
      state: directory
      dest: /etc/haproxy

  - name: "Template haproxy.cfg"
    template:
      src: haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
      owner: root
      group: root
      mode: 0644
    register: haproxy_template

  - name: "Start haproxy container: {{ docker_haproxy }}"
    docker_container:
      image: "{{ docker_haproxy }}"
      name: haproxy
      network_mode: host
      privileged: false
      state: started
      restart: "{{ True if haproxy_template.changed else False }}"
      restart_policy: always
      env:
        container: docker
        IMAGE: "{{ docker_haproxy }}"
        NAME: haproxy
      volumes:
        - /etc/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:Z
    async: 300
    poll: 0
    register: docker_haproxy_async
  when: docker_haproxy is not none

- name: "Waiting on docker containers to start"
  async_status: jid={{ item }}
  register: docker_result
  until: docker_result.finished
  retries: 20
  delay: 15
  with_items:
    - "{{ docker_ovirt_agent_async.ansible_job_id | default(0) }}"
    - "{{ docker_haproxy_async.ansible_job_id | default(0) }}"
