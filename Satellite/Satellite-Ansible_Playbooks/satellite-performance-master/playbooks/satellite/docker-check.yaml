---
- hosts: docker-hosts
  remote_user: root
  gather_facts: no
  vars_files:
    - ../../conf/satperf.yaml
    - ../../conf/satperf.local.yaml
  roles:
    - docker-host-vg   # when docker_host_vg is empty, this autodetects it
  tasks:
    ###- name: "Workaround permission error when creating repodata on container"
    ###  selinux:
    ###    policy=targeted
    ###    state=permissive
    - name: "Get docker version"
      command:
        rpm -q docker
      register: docker_version
    - debug: var=docker_version.stdout_lines
    - name: "Get system uptime (includes load)"
      command:
        uptime
      register: uptime_load
    - debug: var=uptime_load.stdout_lines
    - name: "Base image available"
      shell:
        docker images | grep r7perfsat
    - name: "Get containers ID"
      command:
        docker ps -q
      register: docker_ids
    - debug: var=docker_ids.stdout_lines|length
    - name: "Get /root/container-ips"
      command:
        cat /root/container-ips
      register: container_ips
    - debug: var=container_ips.stdout_lines|length
    - shell:
        sort -R /root/container-ips > /root/container-ips.shuffled
    - name: "Get /root/container-ips.shuffled"
      command:
        cat /root/container-ips.shuffled
      register: container_ips
    - debug: var=container_ips.stdout_lines|length
    - name: "Show disk usage"
      command:
        df -h
      register: df_h
    - debug: var=df_h.stdout_lines
    - name: "grep '^ *server' /root/clients.yaml"
      command:
        grep '^ *server' /root/clients.yaml
      register: clients_server
      ignore_errors: yes
    - debug: var=clients_server.stdout_lines
    - name: "lvdisplay | grep -e 'LV Name' -e 'Allocated pool data'"
      shell:
        lvdisplay | grep -e 'LV Name' -e 'Allocated pool data'
      register: lv_docker_pool
    - debug: var=lv_docker_pool.stdout_lines
    - name: "Get total size of {{ docker_host_vg }}"
      shell:
        vgdisplay --colon "{{ docker_host_vg }}" | cut -d ':' -f 14
      register: vg_size
    - debug: var=vg_size.stdout
    - name: "Get free space on {{ docker_host_vg }}"
      shell:
        vgdisplay --colon "{{ docker_host_vg }}" | cut -d ':' -f 16
      register: vg_free
    - debug: var=vg_free.stdout
    - name: "Make sure there is at least 5% of PE free on {{ docker_host_vg }}"
      assert:
        that: "vg_free.stdout|int >= {{ ( vg_size.stdout|int / 20 ) }}"
