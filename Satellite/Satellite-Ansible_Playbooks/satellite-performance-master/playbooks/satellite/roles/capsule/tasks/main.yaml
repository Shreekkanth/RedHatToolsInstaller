---
  # Check variables
  - assert:
      that: "capsule_install_source == 'repo' or capsule_install_source == 'cdn'"
      msg: "Capsule install source (capsule_install_source) have to be either 'repo' or 'cdn' (current value is '{{ capsule_install_source }}')"

  - name: "Determine pool we are going to attach to"
    command:
      subscription-manager list --available --all --matches "{{ sat_capsule_pool }}" --pool-only
    register: querying
    until: "{{ querying.rc }} == 0"
    retries: 5
    delay: 10
  - debug:
      var: querying
  - name: "Attach to the pool"
    command:
      subscription-manager attach --pool "{{ querying.stdout_lines|first }}"
    register: attaching
    until: "{{ attaching.rc }} == 0"
    retries: 5
    delay: 10

  # Check Satellite sees Capsule
  # See https://access.redhat.com/solutions/1230493
  - name: "Make sure Satellite have Capsule in /etc/hosts"
    lineinfile:
      dest: /etc/hosts
      regexp: '{{ hostvars[item].ip }}\s+{{ item }}'
      line: '{{ hostvars[item].ip }} {{ item }}'
    when: "hostvars[item].ip is defined"
    with_items: "{{ groups['capsules'] }}"
    delegate_to: "{{ groups['satellite6']|first }}"
    run_once: true
  - name: "Make sure Satellite can ping Capsule"
    command:
      ping -c 3 "{{ inventory_hostname }}"
    delegate_to: "{{ groups['satellite6']|first }}"
  - name: "Make sure Satellite can resolve Capsule hostname"
    lineinfile:
      dest: /etc/hosts
      regexp: '{{ ip }}\s+{{ inventory_hostname }}'
      line: '{{ ip }} {{ inventory_hostname }}'
    delegate_to: "{{ groups['satellite6']|first }}"
    when: "ip is defined"

  # We have ran into issues when we have mistakenly broken context on the satellite, so make sure it is OK
  - name: "File /etc/hosts on Satellite have correct SELinux context (had issues before)"
    command:
      restorecon -vR /etc/hosts
    delegate_to: "{{ groups['satellite6']|first }}"
    run_once: true

  - name: "Custom capsule repo configured"
    copy:
      src: "{{ capsule_repo_file }}"
      dest: /etc/yum.repos.d/
      force: yes
    when: "capsule_install_source == 'repo'"

  - name: "Satellite Capsule repository enabled"
    command:
      subscription-manager repos --enable '{{ capsule_cdn_reponame }}'
    when: "sat_install_source == 'cdn'"
    register: enabling
    until: "{{ enabling.rc }} == 0"
    retries: 5
    delay: 10

  # Install packages required for capsule
  - name: "Install capsule package"
    yum:
      name="{{ capsule_installer_pkg }}"
      state=present

  # Prepare for capsule installation
  - name: "Run capsule-certs-generate on Satellite"
    shell:
      "capsule-certs-generate --capsule-fqdn {{ item }} --certs-tar /var/www/html/pub/{{ item }}-certs.tar >/var/www/html/pub/{{ item }}-out.raw"
    delegate_to: "{{ groups['satellite6']|first }}"
    run_once: true
    with_items: "{{ groups['capsules'] }}"
    # Output of this command looks like this:
    # # capsule-certs-generate --capsule-fqdn capsule.example.com --certs-tar aaa.tar
    # Installing             Done                                               [100%] [..........]
    #   Success!
    # 
    #   To finish the installation, follow these steps:
    # 
    #   1. Ensure that the foreman-installer-katello package is installed on the system.
    #   2. Copy aaa.tar to the system capsule.example.com
    #   3. Run the following commands on the capsule (possibly with the customized
    #      parameters, see foreman-installer --scenario capsule --help and
    #      documentation for more info on setting up additional services):
    # 
    #   yum -y localinstall http://sat62.example.com/pub/katello-ca-consumer-latest.noarch.rpm
    #   subscription-manager register --org "Default_Organization"
    #   satellite-installer --scenario capsule\
    #                       --parent-fqdn                         "sat62.example.com"\
    #                       --register-in-foreman                 "true"\
    #                       --foreman-base-url                    "https://sat62.example.com"\
    #                       --trusted-hosts                       "sat62.example.com"\
    #                       --trusted-hosts                       "capsule62.example.com"\
    #                       --oauth-consumer-key                  "ZpFxdhmWhArPmdV5dXn98uuZZzqEMJxc"\
    #                       --oauth-consumer-secret               "4xaW6ZvyP8sJeHyhehEhzt7nspDq6k3W"\
    #                       --pulp-oauth-secret                   "waQ9uU4HGrtfbAgcTFzqHASCqwJMx9qi"\
    #                       --certs-tar                           "aaa.tar"
    #   The full log is at /var/log/capsule-certs-generate.log
  - name: "Download tarball created by capsule-certs-generate"
    get_url:
      url="http://{{ groups['satellite6']|first }}/pub/{{ inventory_hostname }}-certs.tar"
      dest="/root/{{ inventory_hostname }}-certs.tar"
      force=yes
  - name: "Download output produced by capsule-certs-generate"
    get_url:
      url="http://{{ groups['satellite6']|first }}/pub/{{ inventory_hostname }}-out.raw"
      dest="/root/{{ inventory_hostname }}-out.raw"
      force=yes
  - name: "Get only commands we need to run"
    shell:
      sed 's/\x1B\[[0-9;]*[JKmsu]//g' "/root/{{ inventory_hostname }}-out.raw" | grep -e '^\s\+satellite-installer ' -e '^\s\+foreman-installer ' -e '^\s\+capsule-installer ' -e '^\s\+--' | sed 's|\(^\s\+--certs-tar\s\+"\).*$|\1/root/{{ inventory_hostname }}-certs.tar"\\|' > "/root/{{ inventory_hostname }}-script.sh"
  - name: "Fix certificate tarball path"
    shell:
      sed -i 's|/var/www/html/pub/{{ inventory_hostname }}-certs.tar|/root/{{ inventory_hostname }}-certs.tar|' "/root/{{ inventory_hostname }}-script.sh"

  # Make sure remote execution plugin is enabled
  # https://bugzilla.redhat.com/show_bug.cgi?id=1402240
  - name: "Make sure remote execution plugin is enabled"
    lineinfile:
      dest: "/root/{{ inventory_hostname }}-script.sh"
      line: '                    --enable-foreman-proxy-plugin-remote-execution-ssh\'
      insertafter: '.*-installer .*'
  - name: "We need SCL for remote execution"
    command:
      subscription-manager repos --enable rhel-server-rhscl-7-rpms
    register: enabling_scl
    until: "{{ enabling_scl.rc }} == 0"
    retries: 5
    delay: 10

  # Finally install capsule
  - name: "Run Capsule configuration"
    command:
      bash "/root/{{ inventory_hostname }}-script.sh"
    register: configuration
    until: "{{ configuration.rc }} == 0"
    retries: 5
    delay: 10
...
