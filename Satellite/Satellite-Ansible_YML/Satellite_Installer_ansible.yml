---

- hosts: satellite_6.6
  become: true

  vars:
  - redhat_repos:
     - rhel-7-server-rpms
     - rhel-7-server-satellite-6.6-rpms
     - rhel-7-server-satellite-maintenance-6-rpms
     - rhel-server-rhscl-7-rpms
     - rhel-7-server-ansible-2.9-rpms

  pre_tasks:
    - include_vars: file=files/site_vars.yml
  
    - name: unregister
      command: subscription-manager unregister 
      ignore_errors: yes

  vars_prompt:
    - name: "rhn_username"
      prompt: "Enter Red Hat Network username"
    - name: "rhn_password"
      prompt: "Enter Red Hat Networt password"
      private: yes

  tasks:
    - name: Registering nodes to Red Hat Network with username "{{ rhn_username }}"
      redhat_subscription: state=present username="{{rhn_username}}" password="{{rhn_password}}" pool=`subscription-manager list --available --matches 'Red Hat Satellite Infrastructure Subscription' --pool-only` autosubscribe=true

    - name: Setting selinux to permissive
      selinux:
        policy: targeted
        state: permissive

    - name: Remove all repositories
      redhat_repository:
        name: *
        state: absent

    - name: Enable Satellite repositories
      redhat_repository:
        name: "{{ item }}"
        state: presant
     with_items: '{{ redhat_repos }}'


# Stopping SELinux and Firewalld to ensure easy install reenabled at end 

    - name: Setting selinux to permissive
      selinux:
        policy: targeted
        state: permissive

    - name: Disable the firewalld service (on RHEL, if configured).
      service:
        name: firewalld
        state: stopped
        enabled: false
      when:
        - ansible_os_family == "RedHat"
        - firewall_disable_firewalld
        - firewalld_installed.rc == 0
    
    - name: Add EPEL repository
      yum_repository:
        name: epel
        description: EPEL YUM repo
        baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/
        enabled: no

# Setting up users

## ROOT
    - name: Generate root host key
      command : ssh-keygen -q -t rsa -f /root/.ssh/id_rsa -C "" -N ""
## ADMIN
    - name: create Admin user
      user:
        name: admin
        password: $apr1$/pb046SQ$X1z6Q7f8X5QuV8josGZiE/
        group: admin

    - name: Add devops user to the sudoers
      copy:
        dest: "/etc/sudoers.d/devops"
        content: "devops  ALL=(ALL)  NOPASSWD: ALL"
   
    - name: Generate admin RSA host key
      command : ssh-keygen -q -t rsa -f /home/admin/.ssh/id_rsa -C "" -N ""

## FOREMAN
    - name: Foreman directory
      file:
        path: /usr/share/foreman/.ssh
        state: directory

    - name: Generate Foreman RSA host key
      command : ssh-keygen -q -t rsa -f /usr/share/foreman/.ssh/id_rsa -C "" -N ""

# MAKE FILES 

    - name: Ansible create file if it doesn't exist example
      file:
        path: "files/site_vars.yml"
        state: touch

    - name: Test shell
      hosts: localhost
      gather_facts: no
      tasks:
        - name: Execute cat 
          shell:
            cmd: |
              cat > files/vars.sh << EOF
              echo "*********************************************************"
              echo "COLLECT VARIABLES FOR SAT 6.X"
              echo "*********************************************************"
              cp -p files/vars.sh files/vars.sh.bak
              export INTERNAL=$(ip -o link | head -n 2 | tail -n 1 | awk '{print $2}' | sed s/:// )
              export EXTERNAL=$(ip route show | sed -e 's/^default via [0-9.]* dev \(\w\+\).*/\1/' | head -1)
              export INTERNALIP=$(ifconfig "$INTERNAL" | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."$3"."$4}')
              export INTERNALSUBMASK=$(ifconfig "$INTERNAL" |grep netmask |awk -F " " {'print $4'})
              export INTERNALGATEWAY=$(ip route list type unicast dev $(ip -o link | head -n 2 | tail -n 1 | awk '{print $2;}' | sed s/:$//) |awk -F " " '{print $7}')
              echo "INTERNALIP=$INTERNALIP" >> files/vars.sh
              echo "*********************************************************"
              echo "ORGANIZATION"
              echo "*********************************************************"
              echo 'What is the name of your Organization?'
              read ORG
              echo 'ORG='$ORG'' >> files/vars.sh
              echo "*********************************************************"
              echo "LOCATION OF YOUR SATELLITE"
              echo "*********************************************************"
              echo 'LOCATION'
              echo 'What is the location of your Satellite server. Example DENVER'
              read LOC
              echo 'LOC='$LOC'' >> files/vars.sh
              echo "*********************************************************"
              echo "SETTING DOMAIN"
              echo "*********************************************************"
              echo 'what is your domain name Example:'$(hostname -d)''
              read DOM
              echo 'DOM='$DOM'' >> files/vars.sh
              echo "*********************************************************"
              echo "ADMIN PASSWORD - WRITE OR REMEMBER YOU WILL BE PROMPTED FOR 
              USER: admin AND THIS PASSWORD WHEN WE IMPORT THE MANIFEST"
              echo "*********************************************************"
              echo 'ADMIN=admin'  >> files/vars.sh
              echo 'What will the password be for your admin user?'
              read  ADMIN_PASSWORD
              echo 'ADMIN_PASSWORD='$ADMIN_PASSWORD'' >> files/vars.sh
              echo "*********************************************************"
              echo "NAME OF FIRST SUBNET"
              echo "*********************************************************"
              echo 'What would you like to call your first subnet for systems you are regestering to satellite?'
              read  SUBNET
              echo 'SUBNET_NAME='$SUBNET'' >> files/vars.sh
              echo "*********************************************************"
              echo "PROVISIONED NODE PREFIX"
              echo "*********************************************************"
              # The host prefix is used to distinguish the demo hosts created at the end of this script.
              echo 'What would you like the prefix to be for systems you are provisioning with Satellite Example poc- kvm- vm-? enter to skip'
              read  PREFIX
              echo 'HOST_PREFIX='$PREFIX'' >> files/vars.sh
              echo "*********************************************************"
              echo "NODE PASSWORD"
              echo "*********************************************************"
              echo 'PROVISIONED HOST PASSWORD'
              echo 'Please enter the default password you would like to use for root for your newly provisioned nodes'
              read PASSWORD
              for i in $(echo "$PASSWORD" | openssl passwd -apr1 -stdin); do echo NODEPASS=$i >> files/vars.sh ; done

              export "DHCPSTART=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."$3"."2}')"
              export "DHCPEND=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."$3"."254}')"
              echo "*********************************************************"
              echo "FINDING NETWORK"
              echo "*********************************************************"
              echo 'INTERNALNETWORK='$(ifconfig "$INTERNAL" | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."0"."0}')'' >> files/vars.sh
              echo "*********************************************************"
              echo "FINDING SAT INTERFACE"
              echo "*********************************************************"
              echo 'SAT_INTERFACE='$(ip -o link | head -n 2 | tail -n 1 | awk '{print $2;}' | sed s/:$//)'' >> files/vars.sh
              echo "*********************************************************"
              echo "FINDING SAT IP"
              echo "*********************************************************"
              echo 'SAT_IP='$(ifconfig "$INTERNAL" | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."$3"."$4}')'' >> files/vars.sh
              echo "*********************************************************"
              echo "*********************************************************"
              echo "SETTING RELM"
              echo "*********************************************************"
              echo 'REALM='$(hostname -d)'' >> files/vars.sh
              echo "*********************************************************"
              echo "SETTING DNS"
              echo "*********************************************************"
              echo 'DNS='$(ip route list type unicast dev $(ip -o link | head -n 2 | tail -n 1 | awk '{print $2;}' | sed s/:$//) |awk -F " " '{print $7}')'' >> files/vars.sh
              echo 'DNS_REV='$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $3"."$2"."$1".""in-addr.arpa"}')'' >> files/vars.sh
              echo "*********************************************************"
              echo "DNS PTR RECORD"
              echo "*********************************************************"
              'PTR='$(ifconfig "$INTERNAL" | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $4}')''  >> files/vars.sh
              echo "*********************************************************"
              echo "SETTING SUBNET VARS"
              echo "*********************************************************"
              echo 'SUBNET='$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."0"."0}')'' >> files/vars.sh
              echo 'SUBNET_MASK='$(ifconfig $INTERNAL |grep netmask |awk -F " " {'print $4'})'' >> files/vars.sh
              echo "*********************************************************"
              echo "SETTING BGIN AND END IPAM RANGE"
              echo "*********************************************************"
              echo 'SETTING BEGIN AND END IPAM RANGE'
              echo 'SUBNET_IPAM_BEGIN='$DHCPSTART'' >> files/vars.sh
              echo 'SUBNET_IPAM_END='$DHCPEND'' >> files/vars.sh
              echo "*********************************************************"
              echo "DHCP"
              echo "*********************************************************"
              echo 'DHCP_RANGE=''"'$DHCPSTART' '$DHCPEND'"''' >> files/vars.sh
              echo 'DHCP_GW='$(ip route list type unicast dev $(ip -o link | head -n 2 | tail -n 1 | awk '{print $2;}' | sed s/:$//) |awk -F " " '{print $7}')'' >> files/vars.sh
              echo 'DHCP_DNS='$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."$3"."$4}')'' >> files/vars.sh
              sed -i 's/DHCP_GW=100 /DHCP_GW=/g' files/vars.sh
              sed -i 's/DNS=100 /DNS=/g' files/vars.sh
              EOF
          args:
            executable: /bin/zsh

    - name: Execute the script
      command: sh files/vars.sh
 

##POST SATELLITE INSTALL

    - name: Change file ownership, Foreman group and permissions
      file:
        path: /usr/share/foreman/.ssh
        owner: foreman
        group: foreman
        mode: '0700'


## ENABLE SERVICES 

    - name: Enable firewall and allow traffic
      firewalld: 
        port: "{{ item }}"
        state: enabled
        permanent: true
      with_items:
        - 80/tcp
        - 81/tcp
        - 443/tcp
        - 8080/tcp




