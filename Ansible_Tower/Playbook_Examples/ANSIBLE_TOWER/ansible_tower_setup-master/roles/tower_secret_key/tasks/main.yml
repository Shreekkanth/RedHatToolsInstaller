---

- name: wait for connection to tower host
  wait_for_connection:
    delay: 0
    timeout: 2
  delegate_to: "{{ tower_secret_key_delegate }}"
  register: _tower_down
  ignore_errors: yes

- name: block for logic around retrieving key from backup tarball
  block:

  - debug:
      msg: "Tower node is inaccessible via Ansible. Attempting to use backup"

  - name: determine if backup file exists
    stat:
      path: "{{ tower_secret_key_backup_file }}"
    register: _tower_backup

  - fail:
      msg: "{{ tower_secret_key_backup_file }} does not exist. You can specify a backup file with -e tower_secret_key_backup_file=BACKUP_TARBALL"
    when: not _tower_backup.stat.exists

  - name: create a tmp directory for tower backup
    tempfile:
      state: directory
    register: _tower_backup_dir

  - name: extract tower backup to temp directory {{ tower_backup_dir.path }}
    unarchive:
      src: "{{ _tower_backup_file }}"
      dest: "{{ _tower_backup_dir.path }}"

  - name: extract common.tgz file of backup
    unarchive:
      src: "{{ _tower_backup_dir.path }}/common.tar.gz"
      dest: "{{ _tower_backup_dir.path }}"

  - name: get content of SECRET_KEY file
    slurp:
      src: "{{ _tower_backup_dir.path }}/SECRET_KEY"
    register: _secret_key

  - set_fact:
      tower_secret_key: "{{ _secret_key.content | b64decode }}"

  when: _tower_down.failed

- name: obtain key from tower node
  block:
  - name: obtain secret key from tower node
    slurp:
      src: /etc/tower/SECRET_KEY
    register: _secret_key
    ignore_errors: yes
    delegate_to: "{{ groups['tower'][0]}}"
    become: true

  - set_fact:
      tower_secret_key: "{{ _secret_key.content | b64decode }}"

  when: not _tower_down.failed
