---
- name: Check if cmdline file exists
  stat:
    path: "{{ cmdline_file }}"
  register: cmdlinefile_stat

- name: Fail if cmdfile is not found
  fail:
    msg: CMDLINE file not found on {{cmdline_file}}
  when:  not cmdlinefile_stat.stat.exists

- name: Read hostname from cmdline
  shell: grep -Po '{{ hostname_regexp }}' {{ cmdline_file }}
  register: hostname_grep

- name: Read centro from cmdline
  shell: grep -Po '{{ centro_regexp }}' {{ cmdline_file }}
  register: centro_grep

- name: Read maqueta from cmdline
  shell: grep -Po '{{ maqueta_regexp }}' {{ cmdline_file }}
  register: maqueta_grep

- name: Read entornop from cmdline
  shell: grep -Po '{{ entorno_regexp }}' {{ cmdline_file }}
  register: entorno_grep

- name: Read gateway from cmdline
  shell: grep -Po '{{ gateway_regexp }}' {{ cmdline_file }}
  register: gateway_grep

- name: Build host vars
  set_fact:
    _hostname: "{{ hostname_grep.stdout }}"
    _centro: "{{ centro_grep.stdout }}"
    _maqueta: "{{ maqueta_grep.stdout }}"
    _entornop: "{{ entorno_grep.stdout }}"
    _gateway: "{{ gateway_grep.stdout }}"

- name: Wait for gateway to be up
  command: 'ping -c 5 {{ _gateway }}'
  register: result_ping
  changed_when: false
  retries: 60
  delay: 5
  until: result_ping.rc == 0
  # 60 retries with 5 secs delay = 5 minutes

- name: Build servidor vars
  set_fact:
    _servidor: sn{{_centro}}.tnd.mercadona.es
    _ipservidor: "{{ lookup('dig', '_servidor') }}"

- name: Wait for server to be up
  wait_for:
    port: 22
    host: "{{ _ipservidor }}"
    timeout: 300

- name: Add server IP in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    line: "{{ _ipservidor }}\tservidor"
    state: present

- name: Download .repo file from server
  get_url:
    url: http://{{_servidor}}/MaquetaNA/{{_maqueta}}/{{_maqueta}}.repo
    dest: /etc/yum.repos.d/{{_maqueta}}.repo

- name: Install Puppet
  yum:
    name: "{{ item }}"
  with_items:
    - puppet
    - augeas

- name: Configure puppet.conf file
  template:
    src: puppet.conf.j2
    dest: /etc/puppet/puppet.conf

- name: Revoke certificates if any in Puppet CA
  uri:
    url: https://{{_servidor}}:8140/production/certificate_status/{{ ansible_fqdn }}
    method: DELETE
    headers:
      Accept: "pson"
    validate_certs: no

- name: Run puppet agent
  puppet:
  register: puppet_execution

- block:

  - name: Disable firstboot execution if puppet has finished with 0 or 2
    shell: mv /etc/rc3.d/S99mercafirstboot /root/install/

  - name: Check if firstboot service exists
    stat:
      path: /etc/systemd/system/mercafirstboot.service
    register: firstboot_service_stat

  - name: Disable firstboot service
    service:
      name: mercafirstboot.service
      state: disabled
    when: firstboot_service_stat.exists

  - name: Delete firstboot service
    file:
      path: /etc/systemd/system/mercafirstboot.service
      state: absent
    when: firstboot_service_stat.exists

  - name: Save timestamp in /etc/merca-version
    lineinfile:
      dest: /etc/merca-version
      line: "{{ ansible_date_time.date }} {{ ansible_date_time.time }}"
      state: present

  - name: Create initial /etc/motd file
    template:
      src: motd.j2
      dest: /etc/motd

  when: puppet_execution.rc == '0' or puppet_execution.rc == '2'

- name: Download bootstrap.py
  get_url:
    url: http://{{ capsuleha }}/pub/util/bootstrap_merca.py  chmod +x /root/bootstrap.py
    dest: /root/bootstrap.py
    mode: 755

- name: Execute bootstrap.py
  shell: |
    /root/bootstrap.py -l {{bootstrap.l}}  -p {{bootstrap.p}}
    -s {{ capsuleha }} -o {{bootstrap.o}} -L {{bootstrap.L}}
    -g {{_maqueta.split('-')[:-1] | join('-')}}/{{_maqueta.split('-')[-1]}} -a {{_maqueta}}
    --subnet subnet-{{ansible_fqdn[:3]}}-c{{_centro}}n
    --domain c{{_centro}}n.tnd.mercadona.es --force

- name: Cleanup files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /root/install.puppet.log
    - /tmp/curl.log
    - /tmp/jq
    - /tmp/ks-script*
    - /opt/maquetas/data.*

- name: Reboot server
  shell: /sbin/reboot
