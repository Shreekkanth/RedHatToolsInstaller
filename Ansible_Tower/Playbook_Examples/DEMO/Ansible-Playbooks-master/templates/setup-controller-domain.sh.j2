#!/usr/bin/env bash

set -e
set -x

# exit 0 = success, no changes
# exit 1 = error
# exit 2 = success, changes

domain_name=controller-{{ named_env }}
disk_name=controller-{{ named_env }}.qcow2

if [[ $(virsh domid ${domain_name}) ]]; then
	exit 0
fi

cd /var/lib/libvirt/images

# Create an empty qcow2 file for a base image
qemu-img create -f qcow2 ${disk_name} 230G

# Use virt-resize to dump the guest image into the qcow2 file we just created.
virt-resize \
  --expand /dev/sda1 {{ copy_result.dest }} \
  ${disk_name}

# - Remove cloud-init (causes delays and problems when not used on a cloud)
# - Set UseDNS=no for initial login
# - Set root user password
# - Inject root user SSH key
# - Copy in templated director NIC configs
virt-customize \
  -a ${disk_name} \
  --run-command "yum remove cloud-init* -y; sed -i 's/^#UseDNS.*\$/UseDNS no/g' /etc/ssh/sshd_config" \
  --root-password password:'{{ controller.root_user_password | mandatory }}' \
  --selinux-relabel

virt-install \
  --ram {{ controller.ram | mandatory }} \
  --vcpus {{ controller.vcpus | mandatory }} \
  --os-variant rhel7 \
  --disk path=/var/lib/libvirt/images/${disk_name},device=disk,bus=virtio,format=qcow2 \
  --import \
  --noautoconsole \
  --vnc \
  --bridge br-provision \
  --bridge br-external \
  --bridge br-internalapi \
  --bridge br-storage \
  --bridge br-externalapi \
  --bridge br-tenant \
  --bridge br-storagemgmt \
  --autostart \
  --name ${domain_name}

exit 2
