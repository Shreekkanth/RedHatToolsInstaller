#  Playbook: rolling-update-firewall.yaml
#
#   Updates firewall rules one at a time on each host by deleting
#   /usr/share/firewall and then running puppet. This is necessary
#   because iptables does not update a rule that puppet has
#   modified. It also ensures that no firewall rules exist that are
#   not managed by puppet.
#
---

#
# Set nagios downtime for app hosts
#
- hosts: webdrupal-app
  gather_facts: true
  pre_tasks:
    - name: set nagios downtime for application services
      nagios: action=downtime minutes=60 service=all host={{ inventory_hostname }}
      delegate_to: "{{ nagios_host }}"
      tags: nagios

    - name: set nagios downtime for proxy services
      nagios: action=downtime minutes=60 service=all host={{ item }}
      delegate_to: "{{ nagios_host }}"
      with_items: groups['webdrupal-proxy']
      tags: nagios

    - name: set nagios downtime for elbs
      nagios: action=downtime minutes=60 service="{{ item }}" host="{{ admin_host }}"
      delegate_to: "{{ nagios_host }}"
      with_items: elbs
      when: elbs is defined
      tags: nagios

    - name: set nagios downtime for elbs
      nagios: action=downtime minutes=60 service="{{ item }}" host="{{ admin_host_secondary }}"
      delegate_to: "{{ nagios_host }}"
      with_items: elbs
      when: elbs is defined
      tags: nagios

    - name: disable puppet
      shell: service puppet stop
      tags: puppet


#
# Set nagios downtime for proxy hosts
#
- hosts: webdrupal-proxy
  gather_facts: true
  pre_tasks:
    - name: set nagios downtime for application services
      nagios: action=downtime minutes=30 service=all host={{ inventory_hostname }}
      delegate_to: "{{ nagios_host }}"
      tags: nagios

    - name: set nagios downtime for elbs
      nagios: action=downtime minutes=30 service="{{ item }}" host="{{ admin_host }}"
      delegate_to: "{{ nagios_host }}"
      with_items: elbs
      when: elbs is defined
      tags: nagios

    - name: set nagios downtime for elbs
      nagios: action=downtime minutes=30 service="{{ item }}" host="{{ admin_host_secondary }}"
      delegate_to: "{{ nagios_host }}"
      with_items: elbs
      when: elbs is defined
      tags: nagios


#
# Update firewall rules on app hosts
#
- hosts: webdrupal-app
  serial: 1
  gather_facts: true
  tasks:
    - name: disable puppet
      shell: webdrupal disable_puppet
      tags: puppet

    - name: gathering ec2 facts
      ec2_facts:
      tags:
        - out_rotation
        - in_rotation

    # TODO: enable that thing on ELBs so connections aren't dropped
    - name: instance de-register
      local_action: ec2_elb
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        state: 'absent'
      tags: out_rotation

    - name: delete firewall rules
      shell: rm -rf /usr/share/firewall
      tags: firewall

    - name: start puppet
      shell: service puppet start
      tags: puppet

    - name: enabling puppet
      shell: puppet agent --enable
      tags: puppet

    - name: run puppet
      shell: /usr/bin/puppet agent --test
      ignore_errors: yes
      tags: puppet

    - name: disable puppet
      shell: webdrupal disable_puppet
      tags: always_do_this

    - name: re-add cmsapp1 to price editing hack elb
      local_action: ec2_elb
      args:
        instance_id: "{{ price_hack_id }}"
        ec2_elbs: "{{ price_hack_elb }}"
        state: 'present'
      when: price_hack_id is defined and price_hack_elb is defined
      ignore_errors: yes
      tags:
        - in_rotation
        - price_hack

    - name: instance register
      local_action: ec2_elb
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ elb_name }}"
        state: 'present'
      ignore_errors: yes
      tags: in_rotation

    # node is in the elb. delay to ensure two healthchecks fire and then
    # perform a manual healthcheck. if successful, the node should be
    # in service
    - name: confirm node is in service
      wait_for: host=localhost port=80 delay=30
      tags: healthcheck


#
# Update firewall rules on the proxy servers
#
- hosts: webdrupal-proxy
  gather_facts: true
  serial: 1
  tasks:
    - name: gathering ec2 facts
      ec2_facts:
      tags:
        - out_rotation
        - in_rotation

    - name: instance de-register
      local_action: ec2_elb
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        state: 'absent'
      tags: out_rotation

    - name: delete firewall rules
      shell: rm -rf /usr/share/firewall
      tags: firewall

    - name: Run puppet
      shell: /usr/bin/puppet agent --test
      ignore_errors: yes
      tags: puppet

    - name: instance register
      local_action: ec2_elb
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ public_elb }}"
        state: 'present'
      ignore_errors: yes
      tags: in_rotation

    - name: instance register
      local_action: ec2_elb
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ internal_elb }}"
        state: 'present'
      ignore_errors: yes
      tags: in_rotation

    - name: instance register
      local_action: ec2_elb
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ admin_elb }}"
        state: 'present'
      ignore_errors: yes
      tags: in_rotation

    # node is in the elb. delay to ensure two healthchecks fire and then
    # perform a manual healthcheck. if successful, the node should be
    # in service
    - name: confirm node is in service
      wait_for: host=localhost port=80 delay=30
      tags: healthcheck


#
# Post-tasks for rolling release
#
- hosts: webdrupal-app
  gather_facts: false
  tasks:
    - name: re-enable puppet
      shell: webdrupal enable_puppet
      tags: always_do_this
